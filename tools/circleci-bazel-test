#!/usr/bin/env bash

set -eux -o pipefail

FLAVOUR=${CIRCLE_JOB//bazel-/}
REPO_NAME=$CIRCLE_PR_REPONAME

REPO_DIR=$(echo "$REPO_NAME" | tr - _ | tr '[:upper:]' '[:lower:]')

BAZEL_ARGS=("$@")
if [[ "${#BAZEL_ARGS[@]}" -eq 0 ]]; then
  BAZEL_ARGS=("//$REPO_DIR/...")
fi

# Show the pre-cleanup environment for debugging purposes.
env

# Only allow a few env vars to be passed through so we don't invalidate bazel
# build caches with changes in the action environment.
ALLOWED_ENV=(
  PATH
  HOSTNAME
  TERM
  HOME
  NIXOS_VERSION
  USER
)

readarray -t VARS < <(compgen -e)
for var in "${VARS[@]}"; do
  if [[ ! " ${ALLOWED_ENV[@]} " =~ " $var " ]]; then
    unset "$var"
  fi
done

# Show the post-cleanup environment for debugging purposes.
env

# Find the patchelf binary.
for PATCHELF in /nix/store/*-patchelf-*/bin/patchelf; do
  if [[ -x "$PATCHELF" ]]; then
    break
  fi
done

pushd /src/workspace
curl -L https://github.com/buchgr/bazel-remote/releases/download/v2.5.0/bazel-remote-2.5.0-linux-x86_64 -o /tmp/bazel-remote
# TODO(iphydf): Use bazel once the image is updated.
# bazel run @patchelf//:patchelf -- --set-interpreter /nix/store/*-glibc-*/lib64/ld-linux-x86-64.so.2 /tmp/bazel-remote
"$PATCHELF" --set-interpreter /nix/store/*-glibc-*/lib64/ld-linux-x86-64.so.2 /tmp/bazel-remote
chmod +x /tmp/bazel-remote
popd

tar -C .. -xf <(curl -L "https://github.com/TokTok/toktok-stack/releases/download/nightly/$FLAVOUR.tar")
# Test whether it starts up at all.
/tmp/bazel-remote --dir ../bazel-cache --max_size 1 --grpc_address=unix:///tmp/grpc.sock --idle_timeout 1s
# Then actually start it.
/tmp/bazel-remote --dir ../bazel-cache --max_size 1 --grpc_address=unix:///tmp/grpc.sock >/tmp/bazel-remote.log &

run_test() {
  pushd /src/workspace
  bazel test \
    --remote_cache=grpc://localhost:9092 \
    --remote_proxy=unix:///tmp/grpc.sock \
    --config="$FLAVOUR" \
    "${BAZEL_ARGS[@]}"
  popd
}

# Baseline: run the tests in the toktok-stack image, before any changes.
run_test

/src/workspace/tools/inject-repo "$REPO_DIR"

# For each commit between master and the current branch, run the tests.
cd "/src/workspace/$REPO_DIR"
git remote add upstream "https://github.com/TokTok/$REPO_NAME"
git fetch upstream master
readarray -t COMMITS < <(git rev-list --reverse upstream/master..HEAD)
for commit in "${COMMITS[@]}"; do
  git checkout "$commit"
  run_test
done
